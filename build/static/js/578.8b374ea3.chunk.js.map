{"version":3,"file":"static/js/578.8b374ea3.chunk.js","mappings":"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","sources":["admin/assets/constant.js","admin/assets/pages/Master/Table.jsx","admin/assets/pages/Master/masterFunction.js","admin/assets/pages/Master/Master.jsx"],"sourcesContent":["const server = process.env.REACT_APP_SERVER || 'http://localhost:8000';\r\nexport default server;\r\n","import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport toast from \"react-hot-toast\";\r\nimport { onEdit, onSave } from \"./masterFunction\";\r\nimport server from \"../../constant\"; // Adjust the import as per your structure\r\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\r\nimport { div } from \"framer-motion/client\";\r\n\r\nconst Table = ({ describes = [], setDescribes, master, title }) => {\r\n\r\n    const [editableRow, setEditableRow] = useState(null); // State to track the row being edited\r\n    const [editedData, setEditedData] = useState({}); // State to store the edited data\r\n    const [error, setError] = useState(null); // State for error handling\r\n    const [loading, setLoading] = useState(false); // State to track loading status\r\n    const token = useSelector((state) => state.auth.token); // Get token using useSelector hook\r\n\r\n    const handleInputChange = (e) => {\r\n        console.log(1)\r\n        setEditedData({ ...editedData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const onCancel = () => {\r\n        setEditableRow(null); // Exit edit mode without saving\r\n        setError(null); // Clear any errors\r\n    };\r\n\r\n    const onDelete = (_id) => {\r\n        // Dismiss any currently active toasts before showing a new one\r\n        toast.dismiss();\r\n\r\n        // Show a confirmation toast\r\n        toast((t) => (\r\n            <div className=\"flex justify-between flex-col\">\r\n                <p className=\"px-3 py-2 shadow-sm rounded-md\">Are you sure you want to delete this</p>\r\n                <div className=\"space-x-2 px-3\">\r\n                    <button\r\n                        onClick={async () => {\r\n                            try {\r\n                                // Send a DELETE request to the server with the describe _id\r\n                                const response = await axios.delete(\r\n                                    `${server}/${master}/delete`,\r\n                                    {\r\n                                        withCredentials: true,\r\n                                        data: { _id }, // Sending the '_id' in the request body\r\n                                    }\r\n                                );\r\n\r\n                                // If the deletion is successful, remove the item from the state\r\n                                setDescribes(describes.filter((describe) => describe._id !== _id));\r\n\r\n                                // Show success toast\r\n                                toast.success(`${title} deleted successfully!`);\r\n                            } catch (err) {\r\n                                // If there's an error, show the error toast\r\n                                toast.error(`Failed to delete ${title}`);\r\n                                console.error(\"Error deleting describe:\", err);\r\n                            }\r\n                            toast.dismiss(t.id); // Dismiss the confirmation toast after action\r\n                        }}\r\n                        className=\"bg-red-500 text-white px-3 py-1 rounded shadow-xl font-semibold\"\r\n                    >\r\n                        Confirm\r\n                    </button>\r\n                    <button\r\n                        onClick={() => toast.dismiss(t.id)} // Dismiss the toast if user cancels\r\n                        className=\"bg-gray-500 text-white px-3 py-1 rounded shadow-xl font-semibold\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        ), {\r\n            duration: Infinity, // Keeps the toast visible until user interacts\r\n            position: \"top-center\",\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n<table className=\"min-w-full table-auto border-collapse border border-gray-200 shadow-lg rounded-lg overflow-hidden\">\r\n  <thead>\r\n    <tr className=\"bg-purple-500 text-white\">\r\n      <th className=\"border px-4 py-2 text-left\">S.No</th>\r\n      <th className=\"border px-4 py-2 text-left\">Name</th>\r\n      <th className=\"border px-4 py-2 text-center\">Actions</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {describes && describes.length > 0 ? (\r\n      describes.map((describe, index) => {\r\n        if (!describe || !describe._id) {\r\n          console.error(\"Invalid describe object:\", describe);\r\n          return null;\r\n        }\r\n\r\n        return (\r\n          <tr\r\n            key={describe._id}\r\n            className=\"hover:bg-blue-50 transition-colors duration-200\"\r\n          >\r\n            <td className=\"border px-4 py-2 text-gray-700 text-center font-semibold\">\r\n              {index + 1}\r\n            </td>\r\n            <td className=\"border px-4 py-2 text-gray-700 font-semibold\">\r\n              {editableRow === describe._id ? (\r\n               <input\r\n               type=\"text\"\r\n               name=\"newName\"\r\n               value={editedData.newName !== undefined ? editedData.newName : describe.name}\r\n               onChange={handleInputChange}\r\n               className=\"w-full h-full px-3 py-1 border rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none text-sm\"\r\n               style={{ fontSize: \"inherit\", lineHeight: \"inherit\" }}\r\n             />\r\n             \r\n              ) : (\r\n                <span className=\"block w-full h-full text-ellipsis overflow-hidden\">\r\n                  {describe.name}\r\n                </span>\r\n              )}\r\n            </td>\r\n            <td className=\"border px-4 py-2 text-center\">\r\n              {editableRow === describe._id ? (\r\n                <>\r\n                  <button\r\n                    onClick={() =>\r\n                      onSave(\r\n                        describe._id,\r\n                        setLoading,\r\n                        editedData,\r\n                        setDescribes,\r\n                        setEditableRow,\r\n                        setError,\r\n                        token,\r\n                        describes,\r\n                        master\r\n                      )\r\n                    }\r\n                    className=\"bg-green-500 text-white px-3 py-1 rounded-md mr-2 hover:bg-green-600 transition-colors duration-200 disabled:opacity-50\"\r\n                    disabled={loading}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                  <button\r\n                    onClick={onCancel}\r\n                    className=\"bg-gray-500 text-white px-3 py-1 rounded-md hover:bg-gray-600 transition-colors duration-200 disabled:opacity-50\"\r\n                    disabled={loading}\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </>\r\n              ) : (\r\n                <div className=\"flex justify-center space-x-2\">\r\n                  <button\r\n                    onClick={() =>\r\n                      onEdit(describe._id, describe.name, setEditableRow, setEditedData)\r\n                    }\r\n                    className=\" text-white px-3 py-1 rounded-md flex items-center justify-center  transition-colors duration-200\"\r\n                  >\r\n                   <img\r\n    src=\"/images/icons/edit.png\" // Use the relative path from the `public` folder\r\n    alt=\"Edit\"\r\n    className=\"mr-1 w-10 hover:bg-gray-100\" // Adjust size if needed\r\n  />\r\n                  </button>\r\n                  <button\r\n                    onClick={() => onDelete(describe._id)}\r\n                    className=\" text-white px-3 py-1 rounded-md flex items-center justify-center  transition-colors duration-200\"\r\n                  >\r\n                     <img\r\n    src=\"/images/icons/trash.png\" // Use the relative path from the `public` folder\r\n    alt=\"Edit\"\r\n    className=\"mr-1 w-10 \" // Adjust size if needed\r\n  />\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </td>\r\n          </tr>\r\n        );\r\n      })\r\n    ) : (\r\n      <tr>\r\n        <td\r\n          colSpan=\"3\"\r\n          className=\"text-center px-4 py-6 text-gray-500 bg-gray-50\"\r\n        >\r\n          No describes found\r\n        </td>\r\n      </tr>\r\n    )}\r\n  </tbody>\r\n</table>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n","import axios from \"axios\";\r\nimport server from \"../../constant\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nexport const onEdit = (id, name, setEditableRow, setEditedData) => {\r\n    setEditableRow(id); // Set the row to edit mode\r\n    setEditedData({ name, newName: name }); // Initialize the edited data with the current value\r\n};\r\n\r\nexport const onSave = async (id, setLoading, editedData, setDescribes, setEditableRow, setError, token, describes,master) => {\r\n    setLoading(true);\r\n    try {\r\n        const response = await axios.put(\r\n            `${server}/${master}/edit`,\r\n            {\r\n                name: editedData.name, \r\n                newName: editedData.newName,\r\n            },\r\n            {\r\n                withCredentials: true,\r\n            }\r\n        );\r\n\r\n        toast.success(`${master } updated successfully!`);\r\n\r\n        // Update local state with new data\r\n        const updatedDescribes = describes.map((describe) =>\r\n            describe._id === id\r\n                ? { ...describe, name: editedData.newName }\r\n                : describe\r\n        );\r\n        setDescribes(updatedDescribes);\r\n        setEditableRow(null); // Exit edit mode\r\n    } catch (err) {\r\n        // Extract the error message from the response object\r\n        const errorMessage = err.response?.data?.message || err.message || \"An unexpected error occurred.\";\r\n        console.error(\"Error updating describe:\", errorMessage);\r\n        toast.error(errorMessage); // Show error message from server\r\n    } finally {\r\n        setLoading(false);\r\n    }\r\n};\r\n\r\n","import { useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport Table from './Table';\r\nimport toast from 'react-hot-toast';\r\nimport server from '../../constant';\r\n\r\nconst Master = (value) => {\r\n\r\n    const master = value.value\r\n    const title = value.title\r\n    const token = useSelector((state) => state.auth.token);\r\n    const [describes, setDescribes] = useState([]);  // Stores list of describes\r\n    const [loading, setLoading] = useState(false);  // Loading state\r\n    const [error, setError] = useState(null);  // Error state\r\n    const [newDescribeName, setNewDescribeName] = useState('');  // For new describe name\r\n    const [adding, setAdding] = useState(false);  // To track if a new describe is being added\r\n\r\n    // Fetch existing describes on component mount or when token changes\r\n    const fetchDescribes = async () => {\r\n        if (!token) return;\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const response = await axios.get(`${server}/${master}/view`, {\r\n                withCredentials: true,\r\n            });\r\n            setDescribes(response.data.data);  // Set the list of describes\r\n        } catch (error) {\r\n            toast.error(`failed to fetch ${title}`);\r\n            setError(error.response?.data?.message || `An error occurred while fetching ${title}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchDescribes();\r\n    }, [master]);  // Runs only when the token changes\r\n\r\n    // Handle input changes for the new describe name\r\n    const handleInputChange = (e) => {\r\n        setNewDescribeName(e.target.value);\r\n    };\r\n\r\n    // Handle adding a new describe\r\n    const handleAddDescribe = async (e) => {\r\n        e.preventDefault();\r\n        if (!newDescribeName.trim()) {\r\n            toast.error(`Please enter a name for the ${title}.`);\r\n            return;\r\n        }\r\n\r\n        setAdding(true);\r\n        setError(null); // Clear any previous errors\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                `${server}/${master}/add`,\r\n                { name: newDescribeName },\r\n                {\r\n                    withCredentials: true,\r\n                }\r\n            );\r\n            toast.success(`${title} added successfully!`);\r\n\r\n            // Re-fetch the describes after adding a new one\r\n            fetchDescribes();\r\n\r\n            setNewDescribeName('');  // Reset input field after success\r\n        } catch (error) {\r\n\r\n            toast.error(error.response?.data?.message);\r\n            setError(error.response?.data?.message || 'An error occurred while adding describe.');\r\n        } finally {\r\n            setAdding(false);  // Stop adding state\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"text-xl font-bold mb-4\" data-aos=\"fade-up\" >{title} List</h1>\r\n            {/* Form to add new describe */}\r\n            <form onSubmit={handleAddDescribe} className=\"mb-4\">\r\n                <div className=\"flex space-x-4\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={newDescribeName}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"Enter Name\"\r\n                        className=\"peer w-56 shadow-xl border-2 px-4 rounded-lg focus:outline-none focus:ring-2  placeholder-slate-500\"\r\n                    />\r\n\r\n\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"bg-blue-500 text-white p-2 rounded shadow-xl font-bold\"\r\n                        disabled={adding}  // Disable while adding\r\n                    >\r\n                        {adding ? 'Adding...' : 'Add '}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n            {/* Loading and error handling */}\r\n            {/* {loading &&  <div className=\"flex w-full flex-col gap-4\">\r\n  <div className=\"skeleton h-32 w-full\"></div>\r\n  <div className=\"skeleton h-4 w-28\"></div>\r\n  <div className=\"skeleton h-4 w-full\"></div>\r\n  <div className=\"skeleton h-4 w-full\"></div>\r\n</div>} */}\r\n\r\n\r\n            {/* Table to display describes */}\r\n            <Table describes={describes} setDescribes={setDescribes} master={master} title={title}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Master;\r\n"],"names":["process","_ref","describes","setDescribes","master","title","editableRow","setEditableRow","useState","editedData","setEditedData","error","setError","loading","setLoading","handleInputChange","useSelector","state","auth","token","e","console","log","target","name","value","onCancel","_jsx","children","_jsxs","className","length","map","describe","index","_id","type","undefined","newName","onChange","style","fontSize","lineHeight","_Fragment","onClick","async","id","axios","put","server","withCredentials","toast","success","err","_err$response","_err$response$data","errorMessage","response","data","message","onSave","disabled","onEdit","src","alt","onDelete","dismiss","t","delete","filter","duration","Infinity","position","colSpan","newDescribeName","setNewDescribeName","adding","setAdding","fetchDescribes","get","_error$response","_error$response$data","useEffect","onSubmit","preventDefault","trim","post","_error$response2","_error$response2$data","_error$response3","_error$response3$data","placeholder","Table"],"sourceRoot":""}